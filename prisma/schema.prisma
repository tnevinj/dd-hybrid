// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Navigation preferences
  navigationMode    String  @default("traditional") // traditional, assisted, autonomous
  aiAdoptionLevel   Int     @default(0) // 0-10
  aiPermissions     Json    @default("{\"suggestions\": true, \"autoComplete\": false, \"proactiveActions\": false, \"autonomousExecution\": false, \"dataAnalysis\": true, \"reportGeneration\": false, \"meetingScheduling\": false, \"documentProcessing\": false}")
  uiDensity         String  @default("comfortable") // compact, comfortable, spacious
  showAIHints       Boolean @default(true)
  autoSaveEnabled   Boolean @default(true)
  notificationSettings Json @default("{\"emailNotifications\": true, \"pushNotifications\": false, \"aiRecommendations\": true, \"deadlineReminders\": true, \"teamUpdates\": true}")

  // Relations
  aiInteractions   AIInteraction[]
  userPatterns     UserPattern[]
  aiRecommendations AIRecommendation[]
  dueDiligenceProjects DueDiligenceProject[]
  deals           Deal[]
  activities      Activity[]
  workspaces      InvestmentWorkspace[]
  workspaceParticipants WorkspaceParticipant[]
  workspaceComments WorkspaceComment[]
  workspaceActivities WorkspaceActivity[]

  @@map("users")
}

// AI Tracking Tables
model AIInteraction {
  id                String   @id @default(cuid())
  userId            String
  timestamp         DateTime @default(now())
  interactionType   String
  recommendationId  String?
  userAction        String   // 'accepted', 'rejected', 'modified', 'ignored'
  timeSavedSeconds  Int?
  module            String
  context           Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_interactions")
}

model UserPattern {
  id              String   @id @default(cuid())
  userId          String
  patternType     String
  patternData     Json
  frequency       Int      @default(1)
  lastObserved    DateTime @default(now())
  confidenceScore Float    @default(0.0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_patterns")
}

model AIRecommendation {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'suggestion', 'automation', 'insight', 'warning'
  priority    String   // 'low', 'medium', 'high', 'critical'
  title       String
  description String
  actions     Json     // Array of RecommendedAction
  confidence  Float    // 0-1
  reasoning   String?
  moduleContext String?
  status      String   @default("pending") // 'pending', 'executed', 'dismissed'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_recommendations")
}

// Core Business Models
model Deal {
  id           String   @id @default(cuid())
  name         String
  status       String   // 'screening', 'due-diligence', 'structuring', 'closed', 'declined'
  priority     String   @default("medium") // 'low', 'medium', 'high', 'critical'
  riskLevel    String?  // 'low', 'medium', 'high'
  lastActivity DateTime @default(now())
  nextAction   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdById  String

  createdBy User @relation(fields: [createdById], references: [id])
  dueDiligenceProjects DueDiligenceProject[]
  activities Activity[]
  deadlines  Deadline[]

  @@map("deals")
}

model DueDiligenceProject {
  id          String   @id @default(cuid())
  dealId      String
  name        String
  description String?
  status      String   @default("active") // 'active', 'completed', 'on-hold', 'cancelled'
  stage       String   @default("initial") // 'initial', 'detailed', 'final'
  startDate   DateTime @default(now())
  targetDate  DateTime?
  completedDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assignedToId String

  deal       Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)
  assignedTo User @relation(fields: [assignedToId], references: [id])
  findings   Finding[]
  risks      Risk[]
  tasks      Task[]
  documents  Document[]

  @@map("due_diligence_projects")
}

model Finding {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String
  severity    String   // 'low', 'medium', 'high', 'critical'
  status      String   @default("open") // 'open', 'investigating', 'resolved', 'closed'
  category    String?
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project DueDiligenceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("findings")
}

model Risk {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String
  category    String   // 'financial', 'operational', 'legal', 'market', 'technology'
  level       String   // 'low', 'medium', 'high', 'critical'
  probability String   // 'low', 'medium', 'high'
  impact      String   // 'low', 'medium', 'high'
  mitigation  String?
  status      String   @default("identified") // 'identified', 'assessing', 'mitigating', 'resolved'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project DueDiligenceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("risks")
}

model Task {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      String   @default("pending") // 'pending', 'in-progress', 'completed', 'overdue'
  priority    String   @default("medium") // 'low', 'medium', 'high', 'critical'
  assignedTo  String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project DueDiligenceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Document {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  type        String?
  category    String?
  filePath    String?
  fileSize    Int?
  mimeType    String?
  status      String   @default("pending") // 'pending', 'processing', 'analyzed', 'approved'
  aiAnalyzed  Boolean  @default(false)
  analysisData Json?
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project DueDiligenceProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Deadline {
  id          String   @id @default(cuid())
  dealId      String
  title       String
  description String?
  dueDate     DateTime
  priority    String   @default("medium") // 'low', 'medium', 'high', 'critical'
  status      String   @default("pending") // 'pending', 'in-progress', 'completed', 'overdue'
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deal Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("deadlines")
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  dealId      String?
  activityType String  // 'created', 'updated', 'completed', 'assigned', 'commented'
  title       String
  description String?
  module      String   // 'dashboard', 'due-diligence', 'deals', 'portfolio', 'reports'
  metadata    Json?
  createdAt   DateTime @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal Deal? @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("activities")
}

// Investment Workspace Models
model InvestmentWorkspace {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // 'SCREENING', 'DUE_DILIGENCE', 'IC_PREPARATION', 'MONITORING', 'UNIFIED'
  status      String   @default("DRAFT") // 'DRAFT', 'ACTIVE', 'REVIEW', 'COMPLETED', 'ARCHIVED'
  phase       String   @default("PLANNING") // 'PLANNING', 'EXECUTION', 'REVIEW', 'PRESENTATION'
  
  // Associations
  dealName    String?
  dealId      String?
  screeningOpportunityId String?
  ddProjectId String?
  structuringProjectId String?
  
  // Metadata
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
  targetCompletionDate DateTime?
  
  // Progress tracking
  overallProgress     Int @default(0)
  completedComponents Int @default(0)
  totalComponents     Int @default(0)
  
  // Tags and categorization
  tags        Json? // Array of strings
  sector      String?
  region      String?
  investmentSize String?
  
  // Relations
  creator     User @relation(fields: [createdBy], references: [id])
  participants WorkspaceParticipant[]
  analysisComponents AnalysisComponent[]
  evidenceLinks EvidenceLink[]
  comments    WorkspaceComment[]
  activities  WorkspaceActivity[]
  workProducts WorkProduct[]
  
  @@map("investment_workspaces")
}

model WorkspaceParticipant {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  role        String   // 'LEAD', 'ANALYST', 'REVIEWER', 'OBSERVER'
  joinedAt    DateTime @default(now())
  lastActive  DateTime?
  
  workspace   InvestmentWorkspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, userId])
  @@map("workspace_participants")
}

model AnalysisComponent {
  id          String   @id @default(cuid())
  workspaceId String
  type        String
  title       String
  description String?
  assignedTo  String?
  status      String   @default("NOT_STARTED") // 'NOT_STARTED', 'IN_PROGRESS', 'UNDER_REVIEW', 'COMPLETED'
  progress    Int      @default(0)
  dueDate     DateTime?
  completedAt DateTime?
  findings    String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspace   InvestmentWorkspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  evidenceLinks EvidenceLink[]
  
  @@map("analysis_components")
}

model EvidenceLink {
  id          String   @id @default(cuid())
  workspaceId String?
  componentId String?
  type        String   // 'DOCUMENT', 'FINDING', 'RISK', 'MODEL', 'INTERVIEW', 'EXTERNAL_DATA'
  title       String
  description String?
  sourceUrl   String?
  sourceSystem String?
  relevanceScore Float?
  reliabilityScore Float?
  attachedBy  String
  attachedAt  DateTime @default(now())
  metadata    Json?
  
  workspace   InvestmentWorkspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  component   AnalysisComponent? @relation(fields: [componentId], references: [id], onDelete: Cascade)
  
  @@map("evidence_links")
}

model WorkspaceComment {
  id          String   @id @default(cuid())
  workspaceId String
  content     String
  authorId    String
  authorName  String
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspace   InvestmentWorkspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  author      User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      WorkspaceComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     WorkspaceComment[] @relation("CommentReplies")
  
  @@map("workspace_comments")
}

model WorkspaceActivity {
  id          String   @id @default(cuid())
  workspaceId String
  type        String   // 'CREATED', 'UPDATED', 'COMMENTED', 'EVIDENCE_ADDED', 'STATUS_CHANGED', 'MEMBER_ADDED', 'COMPONENT_UPDATED'
  description String
  userId      String
  userName    String
  timestamp   DateTime @default(now())
  metadata    Json?
  
  workspace   InvestmentWorkspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("workspace_activities")
}

model WorkspaceTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // 'SCREENING', 'DUE_DILIGENCE', 'IC_PREPARATION', 'MONITORING', 'UNIFIED'
  components  Json     // Array of component templates
  tags        Json?    // Array of strings
  isDefault   Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("workspace_templates")
}

// Work Product Models
model WorkProduct {
  id          String   @id @default(cuid())
  workspaceId String
  title       String
  type        String   // 'DD_REPORT', 'IC_MEMO', 'INVESTMENT_SUMMARY', 'MARKET_ANALYSIS', 'RISK_ASSESSMENT', etc.
  status      String   @default("DRAFT") // 'DRAFT', 'IN_REVIEW', 'UNDER_REVISION', 'APPROVED', 'FINAL', 'ARCHIVED'
  templateId  String?
  
  // Content
  sections    Json     // Array of DocumentSection objects
  metadata    Json     @default("{}")
  
  // Collaboration
  createdBy   String
  lastEditedBy String?
  assignedReviewers Json? // Array of user IDs
  currentReviewer String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastEditedAt DateTime?
  reviewDueDate DateTime?
  approvedAt  DateTime?
  
  // Version control
  version     String   @default("1.0")
  versionHistory Json  @default("[]") // Array of DocumentVersion objects
  
  // Analytics
  wordCount   Int      @default(0)
  readingTime Int      @default(0)
  collaboratorCount Int @default(1)
  commentCount Int     @default(0)
  editCount   Int      @default(0)
  
  // Relations
  workspace   InvestmentWorkspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  comments    DocumentComment[]
  approvalWorkflow ApprovalWorkflow?
  shareSettings DocumentShareSettings[]
  exportHistory DocumentExport[]
  
  @@map("work_products")
}

model DocumentTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // WorkProductType
  category    String
  industry    String?
  
  // Template structure
  sections    Json     // Array of template sections
  defaultMetadata Json @default("{}")
  
  // Template settings
  isDefault   Boolean  @default(false)
  isPublic    Boolean  @default(true)
  tags        Json     @default("[]") // Array of strings
  
  // Usage analytics
  usageCount  Int      @default(0)
  rating      Float?
  
  // Timestamps
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("document_templates")
}

model DocumentComment {
  id          String   @id @default(cuid())
  workProductId String
  sectionId   String?
  parentId    String?
  content     String
  authorId    String
  authorName  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolved    Boolean  @default(false)
  position    Json?    // { start: number, end: number }
  
  workProduct WorkProduct @relation(fields: [workProductId], references: [id], onDelete: Cascade)
  parent      DocumentComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     DocumentComment[] @relation("CommentReplies")
  
  @@map("document_comments")
}

model ApprovalWorkflow {
  id          String   @id @default(cuid())
  workProductId String @unique
  workspaceId String
  
  // Workflow definition
  stages      Json     // Array of ApprovalStage objects
  currentStage Int     @default(0)
  status      String   @default("PENDING") // 'PENDING', 'IN_PROGRESS', 'APPROVED', 'REJECTED', 'CANCELLED'
  
  // Timestamps
  initiatedBy String
  initiatedAt DateTime @default(now())
  completedAt DateTime?
  
  // History
  history     Json     @default("[]") // Array of ApprovalAction objects
  
  workProduct WorkProduct @relation(fields: [workProductId], references: [id], onDelete: Cascade)
  
  @@map("approval_workflows")
}

model DocumentShareSettings {
  id          String   @id @default(cuid())
  workProductId String
  shareUrl    String?  @unique
  permission  String   // 'VIEW', 'COMMENT', 'EDIT', 'ADMIN'
  expiresAt   DateTime?
  passwordProtected Boolean @default(false)
  passwordHash String?
  watermark   String?
  allowDownload Boolean @default(true)
  trackAccess Boolean  @default(true)
  accessCount Int      @default(0)
  createdBy   String
  createdAt   DateTime @default(now())
  
  workProduct WorkProduct @relation(fields: [workProductId], references: [id], onDelete: Cascade)
  accessLog   ShareAccessLog[]
  
  @@map("document_share_settings")
}

model ShareAccessLog {
  id          String   @id @default(cuid())
  shareId     String
  accessedBy  String?  // User ID if logged in, null for anonymous
  accessedAt  DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  action      String   // 'VIEW', 'DOWNLOAD', 'COMMENT', 'EDIT'
  
  shareSettings DocumentShareSettings @relation(fields: [shareId], references: [id], onDelete: Cascade)
  
  @@map("share_access_log")
}

model DocumentExport {
  id          String   @id @default(cuid())
  workProductId String
  format      String   // 'PDF', 'DOCX', 'HTML', 'MARKDOWN', 'JSON', 'CSV'
  fileName    String
  fileSize    Int?
  filePath    String?
  exportedBy  String
  exportedAt  DateTime @default(now())
  options     Json     @default("{}")  // ExportOptions object
  downloadCount Int    @default(0)
  
  workProduct WorkProduct @relation(fields: [workProductId], references: [id], onDelete: Cascade)
  
  @@map("document_exports")
}