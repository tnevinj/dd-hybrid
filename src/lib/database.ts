import Database from 'better-sqlite3';
import path from 'path';

// Create database connection
const dbPath = path.join(process.cwd(), 'dd-hybrid.db');
const db = new Database(dbPath);

// Enable foreign keys and WAL mode for better performance
db.pragma('foreign_keys = ON');
db.pragma('journal_mode = WAL');

// Initialize database schema
const initSchema = () => {
  // Workspaces table - core workspace/project data
  db.exec(`
    CREATE TABLE IF NOT EXISTS workspaces (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      type TEXT NOT NULL, -- 'portfolio', 'deal', 'company', 'report', 'analysis'
      status TEXT NOT NULL, -- 'active', 'completed', 'draft', 'review'
      sector TEXT,
      deal_value INTEGER, -- Deal value in cents for precision
      stage TEXT, -- 'due-diligence', 'investment-committee', 'analysis', etc.
      geography TEXT,
      risk_rating TEXT, -- 'low', 'medium', 'high'
      priority TEXT, -- 'low', 'medium', 'high'
      progress INTEGER DEFAULT 0, -- Progress percentage 0-100
      team_members JSON, -- Array of team member names
      metadata JSON, -- Additional flexible metadata
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Work products table - documents generated by ContentAssembler
  db.exec(`
    CREATE TABLE IF NOT EXISTS work_products (
      id TEXT PRIMARY KEY,
      workspace_id TEXT NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
      title TEXT NOT NULL,
      type TEXT NOT NULL, -- 'DD_REPORT', 'IC_MEMO', 'INVESTMENT_SUMMARY', etc.
      status TEXT DEFAULT 'DRAFT', -- 'DRAFT', 'IN_REVIEW', 'APPROVED', 'ARCHIVED'
      template_id TEXT, -- Reference to template used
      sections JSON NOT NULL, -- Array of document sections
      metadata JSON, -- Project context and other metadata
      word_count INTEGER DEFAULT 0,
      reading_time INTEGER DEFAULT 0, -- Estimated reading time in minutes
      version TEXT DEFAULT '1.0',
      version_history JSON DEFAULT '[]', -- Array of version information
      collaborator_count INTEGER DEFAULT 1,
      comment_count INTEGER DEFAULT 0,
      edit_count INTEGER DEFAULT 0,
      quality_score REAL DEFAULT 0, -- AI-assessed quality score 0-1
      created_by TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Templates table - smart templates for content generation
  db.exec(`
    CREATE TABLE IF NOT EXISTS templates (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      category TEXT, -- 'investment', 'analysis', 'reporting', etc.
      work_product_type TEXT NOT NULL, -- 'DD_REPORT', 'IC_MEMO', etc.
      industry_focus JSON, -- Array of applicable industries
      context_requirements JSON, -- Required context for template
      sections JSON NOT NULL, -- Template sections configuration
      dynamic_fields JSON DEFAULT '[]', -- Dynamic form fields
      data_bindings JSON DEFAULT '[]', -- Data source bindings
      validation_rules JSON DEFAULT '[]', -- Content validation rules
      ai_prompts JSON DEFAULT '{}', -- AI generation prompts
      customization_options JSON DEFAULT '{}', -- Available customizations
      usage_count INTEGER DEFAULT 0,
      rating REAL DEFAULT 0, -- User rating 0-5
      success_rate REAL DEFAULT 0, -- Success rate 0-1
      avg_generation_time INTEGER DEFAULT 0, -- Average generation time in seconds
      created_by TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Template usage tracking
  db.exec(`
    CREATE TABLE IF NOT EXISTS template_usage (
      id TEXT PRIMARY KEY,
      template_id TEXT NOT NULL REFERENCES templates(id) ON DELETE CASCADE,
      workspace_id TEXT NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
      work_product_id TEXT REFERENCES work_products(id) ON DELETE SET NULL,
      navigation_mode TEXT, -- 'traditional', 'assisted', 'autonomous'
      generation_time INTEGER, -- Time taken to generate in seconds
      quality_score REAL, -- Quality of generated content 0-1
      user_rating INTEGER, -- User rating 1-5
      customizations_applied JSON, -- Customizations that were applied
      success BOOLEAN DEFAULT TRUE,
      error_message TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Portfolio tables for investment portfolios
  db.exec(`
    CREATE TABLE IF NOT EXISTS portfolios (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      asset_types JSON NOT NULL, -- Array of asset types: ['traditional', 'real_estate', 'infrastructure']
      total_value INTEGER DEFAULT 0, -- Total portfolio value in cents
      total_invested INTEGER DEFAULT 0, -- Total invested amount in cents
      total_realized INTEGER DEFAULT 0, -- Total realized gains in cents
      unrealized_value INTEGER DEFAULT 0, -- Unrealized value in cents
      irr REAL DEFAULT 0, -- Internal rate of return
      moic REAL DEFAULT 0, -- Multiple on invested capital
      total_return REAL DEFAULT 0, -- Total return percentage
      allocation_targets JSON, -- Target allocations by asset type
      risk_profile TEXT DEFAULT 'medium', -- 'low', 'medium', 'high'
      manager_id TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Portfolio assets table for individual investments
  db.exec(`
    CREATE TABLE IF NOT EXISTS portfolio_assets (
      id TEXT PRIMARY KEY,
      portfolio_id TEXT NOT NULL REFERENCES portfolios(id) ON DELETE CASCADE,
      name TEXT NOT NULL,
      asset_type TEXT NOT NULL, -- 'traditional', 'real_estate', 'infrastructure'
      description TEXT,
      acquisition_date DATE,
      acquisition_value INTEGER NOT NULL, -- Value in cents
      current_value INTEGER NOT NULL, -- Current value in cents
      location_country TEXT,
      location_region TEXT,
      location_city TEXT,
      irr REAL DEFAULT 0,
      moic REAL DEFAULT 0,
      total_return REAL DEFAULT 0,
      environmental_score REAL,
      social_score REAL,
      governance_score REAL,
      overall_esg_score REAL,
      jobs_created INTEGER,
      carbon_footprint INTEGER, -- Can be negative for carbon-negative assets
      sustainability_certifications JSON,
      status TEXT DEFAULT 'active', -- 'active', 'divested', 'pending'
      risk_rating TEXT DEFAULT 'medium', -- 'low', 'medium', 'high'
      sector TEXT,
      tags JSON, -- Array of tags
      specific_metrics JSON, -- Asset-type specific metrics
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Deal screening opportunities
  db.exec(`
    CREATE TABLE IF NOT EXISTS deal_opportunities (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      seller TEXT,
      asset_type TEXT NOT NULL, -- 'fund', 'direct', 'co-investment', 'gp-led', 'other'
      vintage TEXT,
      sector TEXT,
      geography TEXT,
      ask_price INTEGER, -- Price in cents
      nav_percentage REAL, -- Price as percentage of NAV
      expected_return REAL,
      expected_risk REAL,
      expected_multiple REAL,
      expected_irr REAL,
      expected_holding_period INTEGER, -- In months
      due_diligence_project_id TEXT,
      submission_id TEXT,
      workspace_id TEXT REFERENCES workspaces(id) ON DELETE SET NULL,
      status TEXT DEFAULT 'new', -- 'new', 'screening', 'approved', 'rejected', etc.
      ai_confidence REAL, -- 0-1 AI confidence score
      similar_deals JSON, -- Array of similar deal IDs
      ai_recommendations JSON, -- Array of AI recommendations
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Deal screening templates
  db.exec(`
    CREATE TABLE IF NOT EXISTS deal_screening_templates (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      criteria JSON NOT NULL, -- Array of screening criteria
      created_by TEXT,
      is_default BOOLEAN DEFAULT FALSE,
      ai_enhanced BOOLEAN DEFAULT FALSE,
      automation_level TEXT DEFAULT 'none', -- 'none', 'assisted', 'autonomous'
      analytics JSON, -- Usage analytics
      mode_specific_config JSON, -- Configuration per mode
      asset_type_specific JSON, -- Asset type specific config
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Deal scores for each opportunity
  db.exec(`
    CREATE TABLE IF NOT EXISTS deal_scores (
      id TEXT PRIMARY KEY,
      opportunity_id TEXT NOT NULL REFERENCES deal_opportunities(id) ON DELETE CASCADE,
      template_id TEXT REFERENCES deal_screening_templates(id) ON DELETE SET NULL,
      criterion_id TEXT NOT NULL,
      criterion_name TEXT NOT NULL,
      score REAL NOT NULL, -- 0-100
      weight REAL NOT NULL, -- 0-1
      comments TEXT,
      scored_by TEXT,
      scored_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Content generation sessions for tracking AI interactions
  db.exec(`
    CREATE TABLE IF NOT EXISTS generation_sessions (
      id TEXT PRIMARY KEY,
      workspace_id TEXT NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
      template_id TEXT REFERENCES templates(id) ON DELETE SET NULL,
      navigation_mode TEXT,
      project_context JSON, -- Full project context at time of generation
      generation_options JSON, -- Options used for generation
      sections_generated JSON, -- Which sections were generated
      total_time INTEGER, -- Total session time in seconds
      tokens_used INTEGER DEFAULT 0, -- AI tokens consumed
      quality_metrics JSON, -- Quality metrics for generated content
      user_feedback JSON, -- User feedback and ratings
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      completed_at DATETIME
    );
  `);

  // User preferences and settings
  db.exec(`
    CREATE TABLE IF NOT EXISTS user_preferences (
      id TEXT PRIMARY KEY,
      user_id TEXT UNIQUE,
      preferred_analysis_depth TEXT DEFAULT 'detailed', -- 'concise', 'standard', 'detailed'
      communication_style TEXT DEFAULT 'professional', -- 'formal', 'professional', 'conversational'
      default_timeframe TEXT DEFAULT '1Y',
      focus_areas JSON DEFAULT '[]', -- Array of focus areas
      notification_frequency TEXT DEFAULT 'daily',
      preferred_chart_types JSON DEFAULT '["line", "bar"]',
      risk_tolerance TEXT DEFAULT 'medium',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Operational Assessment tables
  db.exec(`
    CREATE TABLE IF NOT EXISTS operational_assessments (
      id TEXT PRIMARY KEY,
      project_id TEXT NOT NULL,
      workspace_id TEXT REFERENCES workspaces(id) ON DELETE SET NULL,
      assessment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
      overall_score REAL DEFAULT 0, -- 0-100 operational excellence score
      process_efficiency_score REAL DEFAULT 0,
      digital_maturity_score REAL DEFAULT 0,
      quality_management_score REAL DEFAULT 0,
      supply_chain_score REAL DEFAULT 0,
      automation_readiness_score REAL DEFAULT 0,
      cost_efficiency_score REAL DEFAULT 0,
      scalability_score REAL DEFAULT 0,
      status TEXT DEFAULT 'draft', -- 'draft', 'in_progress', 'completed', 'approved'
      assessor_name TEXT,
      notes TEXT,
      recommendations JSON, -- Array of improvement recommendations
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS operational_metrics (
      id TEXT PRIMARY KEY,
      assessment_id TEXT NOT NULL REFERENCES operational_assessments(id) ON DELETE CASCADE,
      metric_category TEXT NOT NULL, -- 'process', 'quality', 'efficiency', 'automation', 'cost'
      metric_name TEXT NOT NULL,
      current_value REAL,
      target_value REAL,
      benchmark_value REAL,
      unit TEXT, -- 'percentage', 'hours', 'dollars', 'ratio', etc.
      trend TEXT DEFAULT 'stable', -- 'improving', 'declining', 'stable'
      measurement_date DATETIME DEFAULT CURRENT_TIMESTAMP,
      data_source TEXT,
      reliability_score REAL DEFAULT 1.0, -- 0-1 confidence in data
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS operational_processes (
      id TEXT PRIMARY KEY,
      assessment_id TEXT NOT NULL REFERENCES operational_assessments(id) ON DELETE CASCADE,
      process_name TEXT NOT NULL,
      process_category TEXT, -- 'core', 'support', 'management'
      efficiency_score REAL DEFAULT 0, -- 0-100
      automation_level REAL DEFAULT 0, -- 0-100 percentage automated
      bottlenecks JSON, -- Array of identified bottlenecks
      improvement_opportunities JSON, -- Array of improvement suggestions
      cycle_time_current INTEGER, -- in minutes
      cycle_time_target INTEGER, -- in minutes
      cost_current INTEGER, -- in cents
      cost_target INTEGER, -- in cents
      quality_metrics JSON, -- Quality KPIs for this process
      status TEXT DEFAULT 'active', -- 'active', 'under_review', 'deprecated'
      last_reviewed DATETIME,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS operational_benchmarks (
      id TEXT PRIMARY KEY,
      assessment_id TEXT NOT NULL REFERENCES operational_assessments(id) ON DELETE CASCADE,
      benchmark_category TEXT NOT NULL, -- 'industry', 'peer', 'best_in_class'
      metric_name TEXT NOT NULL,
      company_value REAL,
      benchmark_value REAL,
      percentile_ranking REAL, -- 0-100 percentile vs benchmark
      benchmark_source TEXT,
      industry_sector TEXT,
      company_size_category TEXT, -- 'small', 'medium', 'large'
      geographic_region TEXT,
      data_vintage TEXT, -- Year or quarter of benchmark data
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Management Assessment tables
  db.exec(`
    CREATE TABLE IF NOT EXISTS management_assessments (
      id TEXT PRIMARY KEY,
      project_id TEXT NOT NULL,
      workspace_id TEXT REFERENCES workspaces(id) ON DELETE SET NULL,
      assessment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
      overall_team_score REAL DEFAULT 0, -- 0-100 overall management quality score
      leadership_score REAL DEFAULT 0,
      strategic_thinking_score REAL DEFAULT 0,
      execution_capability_score REAL DEFAULT 0,
      financial_acumen_score REAL DEFAULT 0,
      industry_expertise_score REAL DEFAULT 0,
      team_dynamics_score REAL DEFAULT 0,
      succession_readiness_score REAL DEFAULT 0,
      retention_risk_score REAL DEFAULT 0, -- Higher score = lower risk
      status TEXT DEFAULT 'draft', -- 'draft', 'in_progress', 'completed', 'approved'
      assessor_name TEXT,
      key_strengths JSON, -- Array of identified strengths
      key_concerns JSON, -- Array of concerns/risks
      succession_gaps JSON, -- Array of succession planning gaps
      retention_strategies JSON, -- Array of retention recommendations
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS management_team_members (
      id TEXT PRIMARY KEY,
      assessment_id TEXT NOT NULL REFERENCES management_assessments(id) ON DELETE CASCADE,
      name TEXT NOT NULL,
      position TEXT NOT NULL,
      department TEXT,
      tenure_years REAL DEFAULT 0,
      age INTEGER,
      education_background TEXT,
      previous_experience JSON, -- Array of previous roles/companies
      leadership_score REAL DEFAULT 0, -- 0-100
      strategic_thinking_score REAL DEFAULT 0,
      execution_score REAL DEFAULT 0,
      financial_acumen_score REAL DEFAULT 0,
      industry_expertise_score REAL DEFAULT 0,
      team_collaboration_score REAL DEFAULT 0,
      retention_risk TEXT DEFAULT 'medium', -- 'low', 'medium', 'high'
      succession_readiness REAL DEFAULT 0, -- 0-100 ready to be replaced
      development_areas JSON, -- Array of improvement areas
      key_achievements JSON, -- Array of notable achievements
      compensation_satisfaction TEXT DEFAULT 'unknown', -- 'low', 'medium', 'high', 'unknown'
      career_aspirations TEXT,
      flight_risk_factors JSON, -- Array of factors increasing flight risk
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS gp_relationships (
      id TEXT PRIMARY KEY,
      assessment_id TEXT NOT NULL REFERENCES management_assessments(id) ON DELETE CASCADE,
      gp_name TEXT NOT NULL,
      relationship_type TEXT, -- 'primary', 'secondary', 'advisor'
      relationship_duration_years REAL DEFAULT 0,
      relationship_quality_score REAL DEFAULT 0, -- 0-100
      communication_frequency TEXT, -- 'weekly', 'monthly', 'quarterly', 'as_needed'
      previous_deal_count INTEGER DEFAULT 0,
      previous_deal_performance JSON, -- Array of previous deal outcomes
      value_add_areas JSON, -- Array of value-add contributions
      areas_for_improvement JSON, -- Array of relationship improvement areas
      future_opportunity_pipeline JSON, -- Array of potential future deals
      reference_check_score REAL DEFAULT 0, -- 0-100 based on reference checks
      overall_satisfaction TEXT DEFAULT 'unknown', -- 'low', 'medium', 'high', 'unknown'
      notes TEXT,
      last_interaction_date DATETIME,
      next_review_date DATETIME,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Qualification Assessment tables
  db.exec(`
    CREATE TABLE IF NOT EXISTS qualification_assessments (
      id TEXT PRIMARY KEY,
      team_member_id TEXT NOT NULL REFERENCES management_team_members(id) ON DELETE CASCADE,
      assessment_type TEXT NOT NULL, -- 'skills', 'references', 'performance', 'competency', 'cultural_fit'
      assessment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
      overall_qualification_score REAL DEFAULT 0, -- 0-100 overall qualification score
      verification_status TEXT DEFAULT 'pending', -- 'pending', 'in_progress', 'completed', 'failed'
      assessed_by TEXT,
      methodology TEXT, -- Assessment methodology used
      confidence_level REAL DEFAULT 0, -- 0-1 confidence in assessment
      findings JSON, -- Detailed assessment findings
      recommendations JSON, -- Assessment recommendations
      red_flags JSON, -- Identified red flags
      validation_evidence JSON, -- Supporting evidence
      external_validation_required BOOLEAN DEFAULT FALSE,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS skills_validations (
      id TEXT PRIMARY KEY,
      qualification_assessment_id TEXT NOT NULL REFERENCES qualification_assessments(id) ON DELETE CASCADE,
      skill_category TEXT NOT NULL, -- 'technical', 'leadership', 'strategic', 'financial', 'operational'
      skill_name TEXT NOT NULL,
      claimed_proficiency REAL DEFAULT 0, -- 0-100 self-reported skill level
      validated_proficiency REAL DEFAULT 0, -- 0-100 validated skill level
      validation_method TEXT, -- 'interview', 'test', 'portfolio', 'reference', 'observation'
      evidence_type TEXT, -- 'certification', 'project', 'testimonial', 'demonstration'
      evidence_quality REAL DEFAULT 0, -- 0-100 quality of evidence
      assessor_notes TEXT,
      validation_date DATETIME DEFAULT CURRENT_TIMESTAMP,
      expiry_date DATETIME, -- When validation expires
      industry_relevance REAL DEFAULT 0, -- 0-100 relevance to current role/industry
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS reference_checks (
      id TEXT PRIMARY KEY,
      qualification_assessment_id TEXT NOT NULL REFERENCES qualification_assessments(id) ON DELETE CASCADE,
      reference_name TEXT NOT NULL,
      reference_position TEXT,
      reference_company TEXT,
      relationship_to_candidate TEXT, -- 'direct_manager', 'peer', 'subordinate', 'client', 'board_member'
      reference_type TEXT DEFAULT 'professional', -- 'professional', 'personal', 'academic'
      contact_method TEXT, -- 'phone', 'email', 'video', 'in_person'
      response_status TEXT DEFAULT 'pending', -- 'pending', 'completed', 'declined', 'unreachable'
      overall_rating REAL DEFAULT 0, -- 0-100 overall reference rating
      would_rehire BOOLEAN,
      leadership_rating REAL DEFAULT 0,
      performance_rating REAL DEFAULT 0,
      integrity_rating REAL DEFAULT 0,
      collaboration_rating REAL DEFAULT 0,
      specific_feedback TEXT,
      strengths_mentioned JSON, -- Array of mentioned strengths
      concerns_mentioned JSON, -- Array of mentioned concerns
      verification_items JSON, -- Items verified (title, dates, achievements)
      red_flags JSON, -- Any red flags identified
      reference_date DATETIME DEFAULT CURRENT_TIMESTAMP,
      follow_up_required BOOLEAN DEFAULT FALSE,
      follow_up_notes TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS performance_validations (
      id TEXT PRIMARY KEY,
      qualification_assessment_id TEXT NOT NULL REFERENCES qualification_assessments(id) ON DELETE CASCADE,
      performance_period_start DATE,
      performance_period_end DATE,
      company_name TEXT,
      role_title TEXT,
      claimed_achievements JSON, -- Array of claimed achievements
      validated_achievements JSON, -- Array of validated achievements
      quantitative_metrics JSON, -- Validated quantitative performance metrics
      revenue_impact INTEGER, -- Revenue impact in cents
      cost_savings INTEGER, -- Cost savings in cents
      team_size_managed INTEGER,
      budget_responsibility INTEGER, -- Budget managed in cents
      stakeholder_feedback_score REAL DEFAULT 0, -- 0-100
      peer_review_score REAL DEFAULT 0, -- 0-100
      subordinate_feedback_score REAL DEFAULT 0, -- 0-100
      client_satisfaction_score REAL DEFAULT 0, -- 0-100
      awards_recognition JSON, -- Array of awards and recognition
      performance_improvement_areas JSON, -- Areas for improvement
      validation_sources JSON, -- Sources used for validation
      validation_confidence REAL DEFAULT 0, -- 0-1 confidence level
      discrepancies_found JSON, -- Any discrepancies between claimed and actual
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS competency_validations (
      id TEXT PRIMARY KEY,
      qualification_assessment_id TEXT NOT NULL REFERENCES qualification_assessments(id) ON DELETE CASCADE,
      competency_framework TEXT, -- Framework used (e.g., 'leadership_pipeline', 'mckinsey_7s')
      competency_category TEXT NOT NULL,
      competency_name TEXT NOT NULL,
      required_level REAL DEFAULT 0, -- 0-100 required level for role
      demonstrated_level REAL DEFAULT 0, -- 0-100 demonstrated level
      assessment_method TEXT, -- 'behavioral_interview', 'simulation', 'assessment_center', '360_feedback'
      behavioral_indicators JSON, -- Observed behavioral indicators
      situational_examples JSON, -- Real examples provided by candidate
      assessment_scenarios JSON, -- Scenarios used in assessment
      competency_gaps JSON, -- Identified gaps
      development_recommendations JSON, -- Recommendations for development
      assessor_confidence REAL DEFAULT 0, -- 0-1 assessor confidence
      external_validation JSON, -- External validation (degrees, certifications)
      industry_benchmarks JSON, -- Industry benchmark comparisons
      future_potential_score REAL DEFAULT 0, -- 0-100 future potential
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS cultural_fit_assessments (
      id TEXT PRIMARY KEY,
      qualification_assessment_id TEXT NOT NULL REFERENCES qualification_assessments(id) ON DELETE CASCADE,
      company_culture_profile JSON, -- Company culture characteristics
      individual_profile JSON, -- Individual culture profile
      values_alignment_score REAL DEFAULT 0, -- 0-100 alignment with company values
      work_style_compatibility REAL DEFAULT 0, -- 0-100 work style fit
      communication_style_fit REAL DEFAULT 0, -- 0-100 communication fit
      leadership_style_fit REAL DEFAULT 0, -- 0-100 leadership style fit
      decision_making_style_fit REAL DEFAULT 0, -- 0-100 decision making fit
      change_adaptability_score REAL DEFAULT 0, -- 0-100 adaptability to change
      team_integration_potential REAL DEFAULT 0, -- 0-100 team integration
      cultural_red_flags JSON, -- Identified cultural misalignment areas
      integration_strategies JSON, -- Strategies for successful integration
      cultural_development_plan JSON, -- Plan for cultural adaptation
      assessment_methodology TEXT,
      external_consultant_used BOOLEAN DEFAULT FALSE,
      assessment_tools_used JSON, -- Tools and assessments used
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS qualification_documents (
      id TEXT PRIMARY KEY,
      qualification_assessment_id TEXT NOT NULL REFERENCES qualification_assessments(id) ON DELETE CASCADE,
      document_type TEXT NOT NULL, -- 'resume', 'transcript', 'certification', 'portfolio', 'reference_letter'
      document_name TEXT NOT NULL,
      document_path TEXT, -- File path or URL
      verification_status TEXT DEFAULT 'pending', -- 'pending', 'verified', 'discrepancy', 'fake'
      verification_method TEXT, -- Method used to verify document
      verification_date DATETIME,
      verified_by TEXT, -- Who verified the document
      authenticity_score REAL DEFAULT 0, -- 0-100 confidence in authenticity
      relevance_score REAL DEFAULT 0, -- 0-100 relevance to position
      quality_score REAL DEFAULT 0, -- 0-100 document quality
      key_findings JSON, -- Key findings from document
      discrepancies JSON, -- Any discrepancies found
      verification_notes TEXT,
      expiry_date DATETIME, -- When document/certification expires
      issuing_authority TEXT, -- Authority that issued document
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Deal Structuring tables
  db.exec(`
    CREATE TABLE IF NOT EXISTS deal_structuring_projects (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      type TEXT NOT NULL, -- 'single_asset_continuation', 'multi_asset_continuation', 'tender_offer', 'feeder_fund', 'preferred_equity', 'revenue_participation', 'lbo_structure', 'synthetic_secondary'
      stage TEXT NOT NULL, -- 'screening', 'structuring', 'due_diligence', 'investment_committee', 'execution', 'completed'
      target_value INTEGER NOT NULL, -- Target value in cents
      current_valuation INTEGER, -- Current valuation in cents
      progress INTEGER DEFAULT 0, -- Progress percentage 0-100
      team JSON NOT NULL, -- JSON array of team members
      last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
      key_metrics JSON, -- JSON object of key metrics
      risk_level TEXT DEFAULT 'medium', -- 'low', 'medium', 'high'
      next_milestone TEXT,
      ai_recommendations JSON, -- JSON array of AI recommendations
      workspace_id TEXT REFERENCES workspaces(id) ON DELETE SET NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS deal_structuring_activities (
      id TEXT PRIMARY KEY,
      title TEXT NOT NULL,
      deal_id TEXT NOT NULL REFERENCES deal_structuring_projects(id) ON DELETE CASCADE,
      type TEXT NOT NULL, -- 'financial', 'legal', 'strategic', 'operational'
      status TEXT NOT NULL, -- 'completed', 'in_progress', 'pending'
      date DATETIME DEFAULT CURRENT_TIMESTAMP,
      user TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS deal_structuring_deadlines (
      id TEXT PRIMARY KEY,
      title TEXT NOT NULL,
      due_date DATETIME NOT NULL,
      deal_id TEXT NOT NULL REFERENCES deal_structuring_projects(id) ON DELETE CASCADE,
      priority TEXT NOT NULL, -- 'high', 'medium', 'low'
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Unified Investments table - combines portfolio assets and deal opportunities
  db.exec(`
    CREATE TABLE IF NOT EXISTS investments (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      investment_type TEXT NOT NULL, -- 'internal' | 'external' | 'co_investment' | 'fund'
      asset_type TEXT NOT NULL, -- 'traditional', 'real_estate', 'infrastructure', 'fund', 'direct', 'co-investment', 'gp-led', 'other'
      description TEXT,
      status TEXT NOT NULL, -- 'screening', 'due_diligence', 'structuring', 'active', 'divested', 'rejected'
      current_value INTEGER, -- Current valuation in cents
      target_value INTEGER, -- Target/ask price in cents
      acquisition_value INTEGER, -- For internal investments (acquisition cost)
      expected_return REAL,
      expected_risk REAL,
      expected_multiple REAL,
      expected_irr REAL,
      expected_holding_period INTEGER, -- In months
      geography TEXT,
      sector TEXT,
      risk_rating TEXT, -- 'low', 'medium', 'high'
      esg_scores JSON, -- { environmental: number, social: number, governance: number, overall: number }
      specific_metrics JSON, -- Asset-type specific metrics
      portfolio_id TEXT REFERENCES portfolios(id) ON DELETE SET NULL, -- For internal investments
      deal_id TEXT REFERENCES deal_structuring_projects(id) ON DELETE SET NULL, -- For external investments
      workspace_id TEXT REFERENCES workspaces(id) ON DELETE SET NULL,
      seller TEXT, -- For external investments
      vintage TEXT, -- For fund investments
      nav_percentage REAL, -- Price as percentage of NAV
      due_diligence_project_id TEXT,
      submission_id TEXT,
      ai_confidence REAL, -- 0-1 AI confidence score
      similar_investments JSON, -- Array of similar investment IDs
      ai_recommendations JSON, -- Array of AI recommendations
      acquisition_date DATE, -- For internal investments
      location_country TEXT,
      location_region TEXT,
      location_city TEXT,
      jobs_created INTEGER,
      carbon_footprint INTEGER, -- Can be negative for carbon-negative assets
      sustainability_certifications JSON,
      tags JSON, -- Array of tags
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Exit Management tables - comprehensive exit strategy and process management
  db.exec(`
    CREATE TABLE IF NOT EXISTS exit_opportunities (
      id TEXT PRIMARY KEY,
      portfolio_asset_id TEXT REFERENCES portfolio_assets(id) ON DELETE CASCADE,
      investment_id TEXT REFERENCES investments(id) ON DELETE CASCADE,
      workspace_id TEXT REFERENCES workspaces(id) ON DELETE SET NULL,
      company_name TEXT NOT NULL,
      sector TEXT,
      exit_strategy TEXT NOT NULL, -- 'ipo', 'strategic-sale', 'secondary-sale', 'management-buyout', 'dividend-recapitalization', 'other'
      status TEXT DEFAULT 'planning', -- 'planning', 'preparation', 'execution', 'completed', 'cancelled'
      preparation_stage TEXT DEFAULT 'not-started', -- 'not-started', 'planning', 'preparation', 'execution', 'completed'
      progress INTEGER DEFAULT 0, -- Progress percentage 0-100
      
      -- Valuation and financial data
      current_valuation INTEGER, -- Current valuation in cents
      target_exit_value INTEGER, -- Target exit value in cents
      ai_predicted_value INTEGER, -- AI-predicted exit value in cents
      original_investment INTEGER, -- Original investment amount in cents
      expected_irr REAL, -- Expected IRR
      expected_moic REAL, -- Expected multiple on invested capital
      
      -- Timing
      target_exit_date DATE,
      ai_optimal_exit_date DATE, -- AI-suggested optimal timing
      actual_exit_date DATE,
      holding_period_months INTEGER,
      
      -- Market conditions and scoring
      market_timing_score REAL DEFAULT 0, -- 0-10 market timing assessment
      ai_exit_score REAL DEFAULT 0, -- 0-10 AI-driven exit readiness score
      market_conditions TEXT DEFAULT 'fair', -- 'excellent', 'good', 'fair', 'poor'
      
      -- Process management
      exit_team_lead TEXT,
      exit_advisors JSON DEFAULT '[]', -- Array of external advisors
      potential_buyers JSON DEFAULT '[]', -- Array of potential buyers/acquirers
      key_selling_points JSON DEFAULT '[]', -- Array of key selling points
      areas_for_improvement JSON DEFAULT '[]', -- Areas needing improvement before exit
      
      -- Documentation and compliance
      exit_memo_id TEXT, -- Reference to exit memo work product
      valuation_report_id TEXT, -- Reference to valuation report
      legal_documents JSON DEFAULT '[]', -- Array of legal document references
      compliance_status TEXT DEFAULT 'pending', -- 'pending', 'in-progress', 'completed'
      
      -- AI insights and automation
      ai_insights JSON DEFAULT '[]', -- Array of AI-generated insights
      automation_level TEXT DEFAULT 'manual', -- 'manual', 'assisted', 'autonomous'
      
      -- Metadata
      priority TEXT DEFAULT 'medium', -- 'low', 'medium', 'high'
      risk_factors JSON DEFAULT '[]', -- Array of identified risks
      mitigation_strategies JSON DEFAULT '[]', -- Array of risk mitigation strategies
      
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS exit_processes (
      id TEXT PRIMARY KEY,
      exit_opportunity_id TEXT NOT NULL REFERENCES exit_opportunities(id) ON DELETE CASCADE,
      process_name TEXT NOT NULL,
      process_category TEXT NOT NULL, -- 'financial', 'legal', 'operational', 'marketing', 'strategic', 'compliance'
      status TEXT DEFAULT 'not-started', -- 'not-started', 'in-progress', 'completed', 'on-hold', 'cancelled'
      
      -- Process details
      description TEXT,
      owner TEXT, -- Process owner/responsible party
      team_members JSON DEFAULT '[]', -- Array of team members involved
      dependencies JSON DEFAULT '[]', -- Array of dependent process IDs
      
      -- Timeline
      start_date DATE,
      target_completion_date DATE,
      actual_completion_date DATE,
      estimated_hours INTEGER,
      actual_hours INTEGER,
      
      -- Progress and quality
      progress INTEGER DEFAULT 0, -- Progress percentage 0-100
      quality_score REAL DEFAULT 0, -- Quality assessment 0-10
      automation_level TEXT DEFAULT 'manual', -- 'manual', 'assisted', 'autonomous'
      
      -- Tasks and deliverables
      tasks JSON DEFAULT '[]', -- Array of process tasks
      deliverables JSON DEFAULT '[]', -- Array of expected deliverables
      documents JSON DEFAULT '[]', -- Array of related documents
      
      -- AI enhancement
      ai_recommendations JSON DEFAULT '[]', -- AI-generated process recommendations
      ai_risk_assessment JSON DEFAULT '{}', -- AI risk assessment for this process
      
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS exit_tasks (
      id TEXT PRIMARY KEY,
      exit_opportunity_id TEXT NOT NULL REFERENCES exit_opportunities(id) ON DELETE CASCADE,
      exit_process_id TEXT REFERENCES exit_processes(id) ON DELETE CASCADE,
      task_name TEXT NOT NULL,
      task_category TEXT NOT NULL, -- 'financial', 'legal', 'operational', 'marketing', 'strategic', 'compliance'
      
      -- Task details
      description TEXT,
      priority TEXT DEFAULT 'medium', -- 'low', 'medium', 'high', 'critical'
      status TEXT DEFAULT 'pending', -- 'pending', 'in-progress', 'completed', 'on-hold', 'cancelled'
      
      -- Assignment and ownership
      assignee TEXT,
      reviewer TEXT,
      approver TEXT,
      
      -- Timeline
      due_date DATE,
      completion_date DATE,
      estimated_hours INTEGER,
      actual_hours INTEGER,
      
      -- Dependencies and blocking
      dependencies JSON DEFAULT '[]', -- Array of dependent task IDs
      blocking_factors JSON DEFAULT '[]', -- Array of factors blocking completion
      
      -- Progress and deliverables
      progress INTEGER DEFAULT 0, -- Progress percentage 0-100
      deliverables JSON DEFAULT '[]', -- Array of task deliverables
      documents JSON DEFAULT '[]', -- Array of related documents
      notes TEXT,
      
      -- AI automation
      automation_eligible BOOLEAN DEFAULT FALSE,
      ai_suggestions JSON DEFAULT '[]', -- AI suggestions for task completion
      
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS exit_market_intelligence (
      id TEXT PRIMARY KEY,
      exit_opportunity_id TEXT REFERENCES exit_opportunities(id) ON DELETE CASCADE,
      sector TEXT NOT NULL,
      geography TEXT,
      
      -- Market timing and conditions
      market_timing_score REAL DEFAULT 0, -- 0-10 market timing assessment
      market_conditions TEXT DEFAULT 'fair', -- 'excellent', 'good', 'fair', 'poor'
      market_trends JSON DEFAULT '[]', -- Array of relevant market trends
      
      -- Valuation multiples and benchmarks
      peer_multiples JSON DEFAULT '{}', -- Peer company valuation multiples
      transaction_multiples JSON DEFAULT '{}', -- Recent transaction multiples
      public_market_multiples JSON DEFAULT '{}', -- Public market multiples
      
      -- Buyer landscape
      strategic_buyers JSON DEFAULT '[]', -- Array of potential strategic buyers
      financial_buyers JSON DEFAULT '[]', -- Array of potential financial buyers
      competitive_landscape JSON DEFAULT '[]', -- Competitive landscape analysis
      
      -- Market data sources
      data_sources JSON DEFAULT '[]', -- Array of data sources used
      data_freshness_date DATE,
      confidence_score REAL DEFAULT 0, -- 0-1 confidence in market intelligence
      
      -- AI analysis
      ai_market_insights JSON DEFAULT '[]', -- AI-generated market insights
      ai_timing_recommendation TEXT, -- AI recommendation on market timing
      ai_strategy_recommendations JSON DEFAULT '[]', -- AI strategy recommendations
      
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS exit_valuations (
      id TEXT PRIMARY KEY,
      exit_opportunity_id TEXT NOT NULL REFERENCES exit_opportunities(id) ON DELETE CASCADE,
      valuation_type TEXT NOT NULL, -- 'dcf', 'comparable-companies', 'precedent-transactions', 'asset-based', 'ai-model'
      valuation_date DATE DEFAULT (date('now')),
      
      -- Valuation results
      enterprise_value INTEGER, -- Enterprise value in cents
      equity_value INTEGER, -- Equity value in cents
      per_share_value INTEGER, -- Per share value in cents
      valuation_multiple REAL, -- Valuation multiple (EV/Revenue, EV/EBITDA, etc.)
      
      -- Methodology and assumptions
      methodology_description TEXT,
      key_assumptions JSON DEFAULT '{}', -- Key valuation assumptions
      sensitivity_analysis JSON DEFAULT '{}', -- Sensitivity analysis results
      discount_rate REAL, -- Discount rate used
      terminal_growth_rate REAL, -- Terminal growth rate
      
      -- Market comparables
      comparable_companies JSON DEFAULT '[]', -- Array of comparable companies
      transaction_comparables JSON DEFAULT '[]', -- Array of transaction comparables
      
      -- Quality and confidence
      confidence_level TEXT DEFAULT 'medium', -- 'low', 'medium', 'high'
      quality_score REAL DEFAULT 0, -- 0-10 quality assessment
      peer_review_status TEXT DEFAULT 'pending', -- 'pending', 'reviewed', 'approved'
      
      -- AI enhancement
      ai_generated BOOLEAN DEFAULT FALSE,
      ai_confidence_score REAL DEFAULT 0, -- 0-1 AI confidence in valuation
      ai_adjustments JSON DEFAULT '[]', -- AI-suggested adjustments
      
      -- Version control
      version TEXT DEFAULT '1.0',
      previous_version_id TEXT REFERENCES exit_valuations(id),
      
      created_by TEXT,
      reviewed_by TEXT,
      approved_by TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS exit_documents (
      id TEXT PRIMARY KEY,
      exit_opportunity_id TEXT NOT NULL REFERENCES exit_opportunities(id) ON DELETE CASCADE,
      document_name TEXT NOT NULL,
      document_type TEXT NOT NULL, -- 'memo', 'report', 'presentation', 'model', 'contract', 'compliance', 'marketing'
      document_category TEXT, -- 'internal', 'external', 'confidential', 'public'
      
      -- Document details
      description TEXT,
      file_path TEXT,
      file_size INTEGER,
      mime_type TEXT,
      
      -- Document status and workflow
      status TEXT DEFAULT 'draft', -- 'draft', 'review', 'approved', 'final', 'archived'
      version TEXT DEFAULT '1.0',
      version_history JSON DEFAULT '[]', -- Array of version information
      
      -- Authorship and review
      author TEXT,
      reviewers JSON DEFAULT '[]', -- Array of reviewers
      approvers JSON DEFAULT '[]', -- Array of approvers
      
      -- Access and security
      access_level TEXT DEFAULT 'internal', -- 'public', 'internal', 'confidential', 'restricted'
      sharing_restrictions JSON DEFAULT '[]', -- Array of sharing restrictions
      
      -- AI generation
      ai_generated BOOLEAN DEFAULT FALSE,
      ai_template_used TEXT,
      generation_metadata JSON DEFAULT '{}', -- Metadata about AI generation process
      
      -- Metadata
      tags JSON DEFAULT '[]', -- Array of document tags
      expiry_date DATE, -- For documents with expiry
      
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  db.exec(`
    CREATE TABLE IF NOT EXISTS exit_analytics (
      id TEXT PRIMARY KEY,
      exit_opportunity_id TEXT REFERENCES exit_opportunities(id) ON DELETE CASCADE,
      analysis_date DATE DEFAULT (date('now')),
      analysis_type TEXT NOT NULL, -- 'performance', 'market-timing', 'readiness', 'risk-assessment', 'ai-insights'
      
      -- Analysis results
      overall_score REAL DEFAULT 0, -- 0-10 overall score
      detailed_scores JSON DEFAULT '{}', -- Detailed breakdown of scores
      recommendations JSON DEFAULT '[]', -- Array of recommendations
      risks JSON DEFAULT '[]', -- Array of identified risks
      opportunities JSON DEFAULT '[]', -- Array of identified opportunities
      
      -- Market and timing analysis
      market_timing_score REAL DEFAULT 0,
      sector_conditions JSON DEFAULT '{}',
      competitive_position JSON DEFAULT '{}',
      
      -- Readiness assessment
      financial_readiness_score REAL DEFAULT 0,
      operational_readiness_score REAL DEFAULT 0,
      legal_readiness_score REAL DEFAULT 0,
      strategic_readiness_score REAL DEFAULT 0,
      
      -- AI-driven insights
      ai_generated BOOLEAN DEFAULT FALSE,
      ai_model_version TEXT,
      ai_confidence_score REAL DEFAULT 0,
      ai_insights JSON DEFAULT '[]',
      
      -- Quality and validation
      data_quality_score REAL DEFAULT 0,
      validation_status TEXT DEFAULT 'pending', -- 'pending', 'validated', 'approved'
      peer_review_completed BOOLEAN DEFAULT FALSE,
      
      created_by TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Create indexes for better query performance
  db.exec(`
    CREATE INDEX IF NOT EXISTS idx_workspaces_status ON workspaces(status);
    CREATE INDEX IF NOT EXISTS idx_workspaces_type ON workspaces(type);
    CREATE INDEX IF NOT EXISTS idx_workspaces_updated_at ON workspaces(updated_at);
    CREATE INDEX IF NOT EXISTS idx_work_products_workspace_id ON work_products(workspace_id);
    CREATE INDEX IF NOT EXISTS idx_work_products_type ON work_products(type);
    CREATE INDEX IF NOT EXISTS idx_work_products_status ON work_products(status);
    CREATE INDEX IF NOT EXISTS idx_templates_work_product_type ON templates(work_product_type);
    CREATE INDEX IF NOT EXISTS idx_templates_category ON templates(category);
    CREATE INDEX IF NOT EXISTS idx_template_usage_template_id ON template_usage(template_id);
    CREATE INDEX IF NOT EXISTS idx_template_usage_workspace_id ON template_usage(workspace_id);
    CREATE INDEX IF NOT EXISTS idx_generation_sessions_workspace_id ON generation_sessions(workspace_id);
    
    -- Operational assessment indexes
    CREATE INDEX IF NOT EXISTS idx_operational_assessments_project_id ON operational_assessments(project_id);
    CREATE INDEX IF NOT EXISTS idx_operational_assessments_workspace_id ON operational_assessments(workspace_id);
    CREATE INDEX IF NOT EXISTS idx_operational_metrics_assessment_id ON operational_metrics(assessment_id);
    CREATE INDEX IF NOT EXISTS idx_operational_metrics_category ON operational_metrics(metric_category);
    CREATE INDEX IF NOT EXISTS idx_operational_processes_assessment_id ON operational_processes(assessment_id);
    CREATE INDEX IF NOT EXISTS idx_operational_benchmarks_assessment_id ON operational_benchmarks(assessment_id);
    
    -- Management assessment indexes
    CREATE INDEX IF NOT EXISTS idx_management_assessments_project_id ON management_assessments(project_id);
    CREATE INDEX IF NOT EXISTS idx_management_assessments_workspace_id ON management_assessments(workspace_id);
    CREATE INDEX IF NOT EXISTS idx_management_team_members_assessment_id ON management_team_members(assessment_id);
    CREATE INDEX IF NOT EXISTS idx_gp_relationships_assessment_id ON gp_relationships(assessment_id);
    
    -- Qualification assessment indexes
    CREATE INDEX IF NOT EXISTS idx_qualification_assessments_team_member_id ON qualification_assessments(team_member_id);
    CREATE INDEX IF NOT EXISTS idx_qualification_assessments_type ON qualification_assessments(assessment_type);
    CREATE INDEX IF NOT EXISTS idx_qualification_assessments_status ON qualification_assessments(verification_status);
    CREATE INDEX IF NOT EXISTS idx_skills_validations_assessment_id ON skills_validations(qualification_assessment_id);
    CREATE INDEX IF NOT EXISTS idx_skills_validations_category ON skills_validations(skill_category);
    CREATE INDEX IF NOT EXISTS idx_reference_checks_assessment_id ON reference_checks(qualification_assessment_id);
    CREATE INDEX IF NOT EXISTS idx_reference_checks_status ON reference_checks(response_status);
    CREATE INDEX IF NOT EXISTS idx_performance_validations_assessment_id ON performance_validations(qualification_assessment_id);
    CREATE INDEX IF NOT EXISTS idx_competency_validations_assessment_id ON competency_validations(qualification_assessment_id);
    CREATE INDEX IF NOT EXISTS idx_cultural_fit_assessments_assessment_id ON cultural_fit_assessments(qualification_assessment_id);
    CREATE INDEX IF NOT EXISTS idx_qualification_documents_assessment_id ON qualification_documents(qualification_assessment_id);
    CREATE INDEX IF NOT EXISTS idx_qualification_documents_type ON qualification_documents(document_type);
    CREATE INDEX IF NOT EXISTS idx_qualification_documents_status ON qualification_documents(verification_status);
    
    -- Investments indexes
    CREATE INDEX IF NOT EXISTS idx_investments_type ON investments(investment_type);
    CREATE INDEX IF NOT EXISTS idx_investments_asset_type ON investments(asset_type);
    CREATE INDEX IF NOT EXISTS idx_investments_status ON investments(status);
    CREATE INDEX IF NOT EXISTS idx_investments_portfolio_id ON investments(portfolio_id);
    CREATE INDEX IF NOT EXISTS idx_investments_deal_id ON investments(deal_id);
    CREATE INDEX IF NOT EXISTS idx_investments_workspace_id ON investments(workspace_id);
    CREATE INDEX IF NOT EXISTS idx_investments_updated_at ON investments(updated_at);
    
    -- Exit management indexes
    CREATE INDEX IF NOT EXISTS idx_exit_opportunities_portfolio_asset_id ON exit_opportunities(portfolio_asset_id);
    CREATE INDEX IF NOT EXISTS idx_exit_opportunities_investment_id ON exit_opportunities(investment_id);
    CREATE INDEX IF NOT EXISTS idx_exit_opportunities_status ON exit_opportunities(status);
    CREATE INDEX IF NOT EXISTS idx_exit_opportunities_exit_strategy ON exit_opportunities(exit_strategy);
    CREATE INDEX IF NOT EXISTS idx_exit_opportunities_sector ON exit_opportunities(sector);
    CREATE INDEX IF NOT EXISTS idx_exit_opportunities_target_exit_date ON exit_opportunities(target_exit_date);
    CREATE INDEX IF NOT EXISTS idx_exit_opportunities_market_conditions ON exit_opportunities(market_conditions);
    CREATE INDEX IF NOT EXISTS idx_exit_opportunities_updated_at ON exit_opportunities(updated_at);
    
    CREATE INDEX IF NOT EXISTS idx_exit_processes_exit_opportunity_id ON exit_processes(exit_opportunity_id);
    CREATE INDEX IF NOT EXISTS idx_exit_processes_status ON exit_processes(status);
    CREATE INDEX IF NOT EXISTS idx_exit_processes_process_category ON exit_processes(process_category);
    CREATE INDEX IF NOT EXISTS idx_exit_processes_owner ON exit_processes(owner);
    
    CREATE INDEX IF NOT EXISTS idx_exit_tasks_exit_opportunity_id ON exit_tasks(exit_opportunity_id);
    CREATE INDEX IF NOT EXISTS idx_exit_tasks_exit_process_id ON exit_tasks(exit_process_id);
    CREATE INDEX IF NOT EXISTS idx_exit_tasks_status ON exit_tasks(status);
    CREATE INDEX IF NOT EXISTS idx_exit_tasks_assignee ON exit_tasks(assignee);
    CREATE INDEX IF NOT EXISTS idx_exit_tasks_due_date ON exit_tasks(due_date);
    CREATE INDEX IF NOT EXISTS idx_exit_tasks_priority ON exit_tasks(priority);
    
    CREATE INDEX IF NOT EXISTS idx_exit_market_intelligence_exit_opportunity_id ON exit_market_intelligence(exit_opportunity_id);
    CREATE INDEX IF NOT EXISTS idx_exit_market_intelligence_sector ON exit_market_intelligence(sector);
    CREATE INDEX IF NOT EXISTS idx_exit_market_intelligence_data_freshness_date ON exit_market_intelligence(data_freshness_date);
    
    CREATE INDEX IF NOT EXISTS idx_exit_valuations_exit_opportunity_id ON exit_valuations(exit_opportunity_id);
    CREATE INDEX IF NOT EXISTS idx_exit_valuations_valuation_type ON exit_valuations(valuation_type);
    CREATE INDEX IF NOT EXISTS idx_exit_valuations_valuation_date ON exit_valuations(valuation_date);
    
    CREATE INDEX IF NOT EXISTS idx_exit_documents_exit_opportunity_id ON exit_documents(exit_opportunity_id);
    CREATE INDEX IF NOT EXISTS idx_exit_documents_document_type ON exit_documents(document_type);
    CREATE INDEX IF NOT EXISTS idx_exit_documents_status ON exit_documents(status);
    CREATE INDEX IF NOT EXISTS idx_exit_documents_access_level ON exit_documents(access_level);
    
    CREATE INDEX IF NOT EXISTS idx_exit_analytics_exit_opportunity_id ON exit_analytics(exit_opportunity_id);
    CREATE INDEX IF NOT EXISTS idx_exit_analytics_analysis_type ON exit_analytics(analysis_type);
    CREATE INDEX IF NOT EXISTS idx_exit_analytics_analysis_date ON exit_analytics(analysis_date);
  `);

  console.log('Database schema initialized successfully');
};

// Initialize schema on module load
initSchema();

// Utility functions
export const closeDb = () => {
  db.close();
};

export const getDbStats = () => {
  const workspaceCount = db.prepare('SELECT COUNT(*) as count FROM workspaces').get() as { count: number };
  const workProductCount = db.prepare('SELECT COUNT(*) as count FROM work_products').get() as { count: number };
  const templateCount = db.prepare('SELECT COUNT(*) as count FROM templates').get() as { count: number };
  
  return {
    workspaces: workspaceCount.count,
    workProducts: workProductCount.count,
    templates: templateCount.count,
    dbPath
  };
};

// Analytics database methods
export const getPortfolioMetrics = () => {
  try {
    // Calculate average IRR, MOIC, and DPI from portfolio assets
    const metrics = db.prepare(`
      SELECT 
        AVG(irr) as avgIRR,
        AVG(moic) as avgMOIC,
        AVG(total_return) as avgDPI
      FROM portfolio_assets 
      WHERE status = 'active'
    `).get() as { avgIRR: number; avgMOIC: number; avgDPI: number };
    
    return {
      avgIRR: metrics.avgIRR || 0,
      avgMOIC: metrics.avgMOIC || 0,
      avgDPI: metrics.avgDPI || 0
    };
  } catch (error) {
    console.error('Error fetching portfolio metrics:', error);
    return { avgIRR: 0, avgMOIC: 0, avgDPI: 0 };
  }
};

export const getFundOperationsMetrics = () => {
  try {
    // Placeholder for fund operations metrics
    // In a real implementation, this would query operational metrics tables
    return {
      avgProcessingTime: 4.8,
      automationRate: 0.72,
      errorRate: 0.015
    };
  } catch (error) {
    console.error('Error fetching fund operations metrics:', error);
    return { avgProcessingTime: 0, automationRate: 0, errorRate: 0 };
  }
};

export const getLegalComplianceMetrics = () => {
  try {
    // Placeholder for legal compliance metrics
    // In a real implementation, this would query legal management tables
    return {
      complianceIssues: 2,
      overdueReminders: 1,
      complianceScore: 96
    };
  } catch (error) {
    console.error('Error fetching legal compliance metrics:', error);
    return { complianceIssues: 0, overdueReminders: 0, complianceScore: 0 };
  }
};

export const getDealPipelineMetrics = () => {
  try {
    // Calculate average deal size and conversion rate from deal opportunities
    const metrics = db.prepare(`
      SELECT 
        AVG(ask_price) as avgDealSize,
        COUNT(CASE WHEN status = 'approved' THEN 1 END) * 1.0 / COUNT(*) as conversionRate,
        AVG(ai_confidence) as qualityScore
      FROM deal_opportunities 
      WHERE status IN ('new', 'screening', 'approved', 'rejected')
    `).get() as { avgDealSize: number; conversionRate: number; qualityScore: number };
    
    return {
      avgDealSize: metrics.avgDealSize || 0,
      conversionRate: metrics.conversionRate || 0,
      qualityScore: metrics.qualityScore || 0
    };
  } catch (error) {
    console.error('Error fetching deal pipeline metrics:', error);
    return { avgDealSize: 0, conversionRate: 0, qualityScore: 0 };
  }
};

export const getMarketIntelligenceMetrics = () => {
  try {
    // Placeholder for market intelligence metrics
    // In a real implementation, this would query market intelligence tables
    return {
      accuracyRate: 0.86,
      dataFreshness: 0.92,
      sourceReliability: 0.91
    };
  } catch (error) {
    console.error('Error fetching market intelligence metrics:', error);
    return { accuracyRate: 0, dataFreshness: 0, sourceReliability: 0 };
  }
};

export const getInvestmentOpportunities = () => {
  try {
    const opportunities = db.prepare(`
      SELECT 
        id as dealId,
        name as companyName,
        sector,
        ask_price as dealSize,
        expected_irr as revenueGrowth,
        expected_multiple as profitability,
        'Strong' as marketPosition,
        8 as managementQuality,
        '[]' as competitiveAdvantages,
        '[]' as riskFactors,
        'Investment Bank' as dealSource,
        '60 days' as timeline
      FROM deal_opportunities 
      WHERE status IN ('new', 'screening')
      ORDER BY created_at DESC
      LIMIT 10
    `).all() as any[];
    
    return opportunities.map(opp => ({
      ...opp,
      dealSize: opp.dealSize || 0,
      revenueGrowth: opp.revenueGrowth || 0,
      profitability: opp.profitability || 0,
      competitiveAdvantages: JSON.parse(opp.competitiveAdvantages),
      riskFactors: JSON.parse(opp.riskFactors)
    }));
  } catch (error) {
    console.error('Error fetching investment opportunities:', error);
    return [];
  }
};

export const getFundBenchmarkData = () => {
  try {
    // Calculate fund performance metrics for benchmarking
    const metrics = db.prepare(`
      SELECT 
        AVG(irr) as irr,
        AVG(moic) as moic,
        AVG(total_return) as totalReturn
      FROM portfolios
    `).get() as { irr: number; moic: number; totalReturn: number };
    
    // Get operational metrics from operational assessments
    const operationalMetrics = db.prepare(`
      SELECT 
        AVG(overall_score) as ddAccuracy,
        AVG(process_efficiency_score) as processEfficiency,
        AVG(quality_management_score) as qualityManagement
      FROM operational_assessments 
      WHERE status = 'completed'
    `).get() as { ddAccuracy: number; processEfficiency: number; qualityManagement: number };
    
    return {
      portfolio: {
        irr: metrics.irr || 0,
        moic: metrics.moic || 0,
        totalReturn: metrics.totalReturn || 0
      },
      dueDiligence: {
        ddAccuracy: operationalMetrics.ddAccuracy || 0,
        processEfficiency: operationalMetrics.processEfficiency || 0,
        qualityManagement: operationalMetrics.qualityManagement || 0
      },
      legal: {
        complianceScore: 97,
        legalCosts: 0.023,
        documentTurnaround: 6
      },
      operations: {
        operationalEfficiency: 0.92,
        costRatio: 0.014,
        dataAccuracy: 0.97
      }
    };
  } catch (error) {
    console.error('Error fetching fund benchmark data:', error);
    return {
      portfolio: { irr: 0, moic: 0, totalReturn: 0 },
      dueDiligence: { ddAccuracy: 0, processEfficiency: 0, qualityManagement: 0 },
      legal: { complianceScore: 0, legalCosts: 0, documentTurnaround: 0 },
      operations: { operationalEfficiency: 0, costRatio: 0, dataAccuracy: 0 }
    };
  }
};

export default db;
