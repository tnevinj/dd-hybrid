import Database from 'better-sqlite3';
import path from 'path';

// Create database connection
const dbPath = path.join(process.cwd(), 'dd-hybrid.db');
const db = new Database(dbPath);

// Enable foreign keys and WAL mode for better performance
db.pragma('foreign_keys = ON');
db.pragma('journal_mode = WAL');

// Initialize database schema
const initSchema = () => {
  // Workspaces table - core workspace/project data
  db.exec(`
    CREATE TABLE IF NOT EXISTS workspaces (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      type TEXT NOT NULL, -- 'portfolio', 'deal', 'company', 'report', 'analysis'
      status TEXT NOT NULL, -- 'active', 'completed', 'draft', 'review'
      sector TEXT,
      deal_value INTEGER, -- Deal value in cents for precision
      stage TEXT, -- 'due-diligence', 'investment-committee', 'analysis', etc.
      geography TEXT,
      risk_rating TEXT, -- 'low', 'medium', 'high'
      priority TEXT, -- 'low', 'medium', 'high'
      progress INTEGER DEFAULT 0, -- Progress percentage 0-100
      team_members JSON, -- Array of team member names
      metadata JSON, -- Additional flexible metadata
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Work products table - documents generated by ContentAssembler
  db.exec(`
    CREATE TABLE IF NOT EXISTS work_products (
      id TEXT PRIMARY KEY,
      workspace_id TEXT NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
      title TEXT NOT NULL,
      type TEXT NOT NULL, -- 'DD_REPORT', 'IC_MEMO', 'INVESTMENT_SUMMARY', etc.
      status TEXT DEFAULT 'DRAFT', -- 'DRAFT', 'IN_REVIEW', 'APPROVED', 'ARCHIVED'
      template_id TEXT, -- Reference to template used
      sections JSON NOT NULL, -- Array of document sections
      metadata JSON, -- Project context and other metadata
      word_count INTEGER DEFAULT 0,
      reading_time INTEGER DEFAULT 0, -- Estimated reading time in minutes
      version TEXT DEFAULT '1.0',
      version_history JSON DEFAULT '[]', -- Array of version information
      collaborator_count INTEGER DEFAULT 1,
      comment_count INTEGER DEFAULT 0,
      edit_count INTEGER DEFAULT 0,
      quality_score REAL DEFAULT 0, -- AI-assessed quality score 0-1
      created_by TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Templates table - smart templates for content generation
  db.exec(`
    CREATE TABLE IF NOT EXISTS templates (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      category TEXT, -- 'investment', 'analysis', 'reporting', etc.
      work_product_type TEXT NOT NULL, -- 'DD_REPORT', 'IC_MEMO', etc.
      industry_focus JSON, -- Array of applicable industries
      context_requirements JSON, -- Required context for template
      sections JSON NOT NULL, -- Template sections configuration
      dynamic_fields JSON DEFAULT '[]', -- Dynamic form fields
      data_bindings JSON DEFAULT '[]', -- Data source bindings
      validation_rules JSON DEFAULT '[]', -- Content validation rules
      ai_prompts JSON DEFAULT '{}', -- AI generation prompts
      customization_options JSON DEFAULT '{}', -- Available customizations
      usage_count INTEGER DEFAULT 0,
      rating REAL DEFAULT 0, -- User rating 0-5
      success_rate REAL DEFAULT 0, -- Success rate 0-1
      avg_generation_time INTEGER DEFAULT 0, -- Average generation time in seconds
      created_by TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Template usage tracking
  db.exec(`
    CREATE TABLE IF NOT EXISTS template_usage (
      id TEXT PRIMARY KEY,
      template_id TEXT NOT NULL REFERENCES templates(id) ON DELETE CASCADE,
      workspace_id TEXT NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
      work_product_id TEXT REFERENCES work_products(id) ON DELETE SET NULL,
      navigation_mode TEXT, -- 'traditional', 'assisted', 'autonomous'
      generation_time INTEGER, -- Time taken to generate in seconds
      quality_score REAL, -- Quality of generated content 0-1
      user_rating INTEGER, -- User rating 1-5
      customizations_applied JSON, -- Customizations that were applied
      success BOOLEAN DEFAULT TRUE,
      error_message TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Portfolio tables for investment portfolios
  db.exec(`
    CREATE TABLE IF NOT EXISTS portfolios (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      asset_types JSON NOT NULL, -- Array of asset types: ['traditional', 'real_estate', 'infrastructure']
      total_value INTEGER DEFAULT 0, -- Total portfolio value in cents
      total_invested INTEGER DEFAULT 0, -- Total invested amount in cents
      total_realized INTEGER DEFAULT 0, -- Total realized gains in cents
      unrealized_value INTEGER DEFAULT 0, -- Unrealized value in cents
      irr REAL DEFAULT 0, -- Internal rate of return
      moic REAL DEFAULT 0, -- Multiple on invested capital
      total_return REAL DEFAULT 0, -- Total return percentage
      allocation_targets JSON, -- Target allocations by asset type
      risk_profile TEXT DEFAULT 'medium', -- 'low', 'medium', 'high'
      manager_id TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Portfolio assets table for individual investments
  db.exec(`
    CREATE TABLE IF NOT EXISTS portfolio_assets (
      id TEXT PRIMARY KEY,
      portfolio_id TEXT NOT NULL REFERENCES portfolios(id) ON DELETE CASCADE,
      name TEXT NOT NULL,
      asset_type TEXT NOT NULL, -- 'traditional', 'real_estate', 'infrastructure'
      description TEXT,
      acquisition_date DATE,
      acquisition_value INTEGER NOT NULL, -- Value in cents
      current_value INTEGER NOT NULL, -- Current value in cents
      location_country TEXT,
      location_region TEXT,
      location_city TEXT,
      irr REAL DEFAULT 0,
      moic REAL DEFAULT 0,
      total_return REAL DEFAULT 0,
      environmental_score REAL,
      social_score REAL,
      governance_score REAL,
      overall_esg_score REAL,
      jobs_created INTEGER,
      carbon_footprint INTEGER, -- Can be negative for carbon-negative assets
      sustainability_certifications JSON,
      status TEXT DEFAULT 'active', -- 'active', 'divested', 'pending'
      risk_rating TEXT DEFAULT 'medium', -- 'low', 'medium', 'high'
      sector TEXT,
      tags JSON, -- Array of tags
      specific_metrics JSON, -- Asset-type specific metrics
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Deal screening opportunities
  db.exec(`
    CREATE TABLE IF NOT EXISTS deal_opportunities (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      seller TEXT,
      asset_type TEXT NOT NULL, -- 'fund', 'direct', 'co-investment', 'gp-led', 'other'
      vintage TEXT,
      sector TEXT,
      geography TEXT,
      ask_price INTEGER, -- Price in cents
      nav_percentage REAL, -- Price as percentage of NAV
      expected_return REAL,
      expected_risk REAL,
      expected_multiple REAL,
      expected_irr REAL,
      expected_holding_period INTEGER, -- In months
      due_diligence_project_id TEXT,
      submission_id TEXT,
      workspace_id TEXT REFERENCES workspaces(id) ON DELETE SET NULL,
      status TEXT DEFAULT 'new', -- 'new', 'screening', 'approved', 'rejected', etc.
      ai_confidence REAL, -- 0-1 AI confidence score
      similar_deals JSON, -- Array of similar deal IDs
      ai_recommendations JSON, -- Array of AI recommendations
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Deal screening templates
  db.exec(`
    CREATE TABLE IF NOT EXISTS deal_screening_templates (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      criteria JSON NOT NULL, -- Array of screening criteria
      created_by TEXT,
      is_default BOOLEAN DEFAULT FALSE,
      ai_enhanced BOOLEAN DEFAULT FALSE,
      automation_level TEXT DEFAULT 'none', -- 'none', 'assisted', 'autonomous'
      analytics JSON, -- Usage analytics
      mode_specific_config JSON, -- Configuration per mode
      asset_type_specific JSON, -- Asset type specific config
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Deal scores for each opportunity
  db.exec(`
    CREATE TABLE IF NOT EXISTS deal_scores (
      id TEXT PRIMARY KEY,
      opportunity_id TEXT NOT NULL REFERENCES deal_opportunities(id) ON DELETE CASCADE,
      template_id TEXT REFERENCES deal_screening_templates(id) ON DELETE SET NULL,
      criterion_id TEXT NOT NULL,
      criterion_name TEXT NOT NULL,
      score REAL NOT NULL, -- 0-100
      weight REAL NOT NULL, -- 0-1
      comments TEXT,
      scored_by TEXT,
      scored_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Content generation sessions for tracking AI interactions
  db.exec(`
    CREATE TABLE IF NOT EXISTS generation_sessions (
      id TEXT PRIMARY KEY,
      workspace_id TEXT NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
      template_id TEXT REFERENCES templates(id) ON DELETE SET NULL,
      navigation_mode TEXT,
      project_context JSON, -- Full project context at time of generation
      generation_options JSON, -- Options used for generation
      sections_generated JSON, -- Which sections were generated
      total_time INTEGER, -- Total session time in seconds
      tokens_used INTEGER DEFAULT 0, -- AI tokens consumed
      quality_metrics JSON, -- Quality metrics for generated content
      user_feedback JSON, -- User feedback and ratings
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      completed_at DATETIME
    );
  `);

  // User preferences and settings
  db.exec(`
    CREATE TABLE IF NOT EXISTS user_preferences (
      id TEXT PRIMARY KEY,
      user_id TEXT UNIQUE,
      preferred_analysis_depth TEXT DEFAULT 'detailed', -- 'concise', 'standard', 'detailed'
      communication_style TEXT DEFAULT 'professional', -- 'formal', 'professional', 'conversational'
      default_timeframe TEXT DEFAULT '1Y',
      focus_areas JSON DEFAULT '[]', -- Array of focus areas
      notification_frequency TEXT DEFAULT 'daily',
      preferred_chart_types JSON DEFAULT '["line", "bar"]',
      risk_tolerance TEXT DEFAULT 'medium',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
  `);

  // Create indexes for better query performance
  db.exec(`
    CREATE INDEX IF NOT EXISTS idx_workspaces_status ON workspaces(status);
    CREATE INDEX IF NOT EXISTS idx_workspaces_type ON workspaces(type);
    CREATE INDEX IF NOT EXISTS idx_workspaces_updated_at ON workspaces(updated_at);
    CREATE INDEX IF NOT EXISTS idx_work_products_workspace_id ON work_products(workspace_id);
    CREATE INDEX IF NOT EXISTS idx_work_products_type ON work_products(type);
    CREATE INDEX IF NOT EXISTS idx_work_products_status ON work_products(status);
    CREATE INDEX IF NOT EXISTS idx_templates_work_product_type ON templates(work_product_type);
    CREATE INDEX IF NOT EXISTS idx_templates_category ON templates(category);
    CREATE INDEX IF NOT EXISTS idx_template_usage_template_id ON template_usage(template_id);
    CREATE INDEX IF NOT EXISTS idx_template_usage_workspace_id ON template_usage(workspace_id);
    CREATE INDEX IF NOT EXISTS idx_generation_sessions_workspace_id ON generation_sessions(workspace_id);
  `);

  console.log('Database schema initialized successfully');
};

// Initialize schema on module load
initSchema();

// Utility functions
export const closeDb = () => {
  db.close();
};

export const getDbStats = () => {
  const workspaceCount = db.prepare('SELECT COUNT(*) as count FROM workspaces').get() as { count: number };
  const workProductCount = db.prepare('SELECT COUNT(*) as count FROM work_products').get() as { count: number };
  const templateCount = db.prepare('SELECT COUNT(*) as count FROM templates').get() as { count: number };
  
  return {
    workspaces: workspaceCount.count,
    workProducts: workProductCount.count,
    templates: templateCount.count,
    dbPath
  };
};

export default db;